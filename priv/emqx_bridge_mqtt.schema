%%-*- mode: erlang -*-
%% emqx_bridge_mqtt config mapping
{mapping, "bridge.mqtt.server", "emqx_bridge_mqtt.server", [
  {default, {"127.0.0.1", 1883}},
  {datatype, [integer, ip, string]}
]}.

{mapping, "bridge.mqtt.server.username", "emqx_bridge_mqtt.server", [
  {datatype, string}
]}.

{mapping, "bridge.mqtt.server.password", "emqx_bridge_mqtt.server", [
  {datatype, string}
]}.

{mapping, "bridge.mqtt.server.keepalive", "emqx_bridge_mqtt.server", [
  {default, "60s"},
  {datatype, {duration, s}}
]}.

{translation, "emqx_bridge_mqtt.server", fun(Conf) ->
  {MyHost, MyPort} =
    case cuttlefish:conf_get("bridge.mqtt.server", Conf) of
      {Ip, Port} -> {Ip, Port};
      S          -> case string:tokens(S, ":") of
                      [Domain]       -> {Domain, 1883};
                      [Domain, Port] -> {Domain, list_to_integer(Port)}
                    end
    end,
  L2B = fun(S) when is_list(S) -> list_to_binary(S);
           (undefined)    -> undefined
        end,
  %% XXX: drop undefined option
  Username = L2B(cuttlefish:conf_get("bridge.mqtt.server.username", Conf, undefined)),
  Password = L2B(cuttlefish:conf_get("bridge.mqtt.server.password", Conf, undefined)),
  Keepalive= cuttlefish:conf_get("bridge.mqtt.server.keepalive", Conf),
  [
   {host, MyHost},
   {port, MyPort},
   {username, Username},
   {password, Password},
   {keepalive, Keepalive}]
end}.

{mapping, "bridge.mqtt.remote.subqos", "emqx_bridge_mqtt.remote", [
  {default, 1},
  {datatype, integer}
]}.

{mapping, "bridge.mqtt.remote.$id.topic", "emqx_bridge_mqtt.remote", [
  {datatype, string}
]}.

{translation, "emqx_bridge_mqtt.remote", fun(Conf) ->
  TopicConf = cuttlefish_variable:filter_by_prefix("bridge.mqtt.remote", Conf),
  Topics =
    lists:foldl(
      fun({["bridge", "mqtt", "remote", _Id, "topic"], Topic}, AccIn) ->
          [ list_to_binary(Topic) | AccIn ];
         (_, AccIn) ->
          AccIn
      end, [], TopicConf),
  SubQos = cuttlefish:conf_get("bridge.mqtt.remote.subqos", Conf),
  [
   {topics, Topics},
   {subqos, SubQos}]
end}.

{mapping, "bridge.mqtt.landing.enable", "emqx_bridge_mqtt.landing", [
  {default, true},
  {datatype, {enum, [true, false]}}
]}.

{mapping, "bridge.mqtt.landing.topic", "emqx_bridge_mqtt.landing", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "bridge.mqtt.landing.maxqos", "emqx_bridge_mqtt.landing", [
  {default, 1},
  {datatype, integer}
]}.

{translation, "emqx_bridge_mqtt.landing", fun(Conf) ->
  Enable = cuttlefish:conf_get("bridge.mqtt.landing.enable", Conf),
  Topic  = cuttlefish:conf_get("bridge.mqtt.landing.topic", Conf),
  MaxQos = cuttlefish:conf_get("bridge.mqtt.landing.maxqos", Conf),
  [{enable, Enable},
   {maxqos, MaxQos},
   {topic, list_to_binary(Topic)}]
end}.

